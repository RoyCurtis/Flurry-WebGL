sPartMesh.geometry.faces[0].vertexColors[0].r = sPartData.color[0][0];
sPartMesh.geometry.faces[0].vertexColors[0].g = sPartData.color[1][0];
sPartMesh.geometry.faces[0].vertexColors[0].b = sPartData.color[2][0];

sPartMesh.geometry.faces[0].vertexColors[1].r = sPartData.color[0][1];
sPartMesh.geometry.faces[0].vertexColors[1].g = sPartData.color[1][1];
sPartMesh.geometry.faces[0].vertexColors[1].b = sPartData.color[2][1];

sPartMesh.geometry.faces[0].vertexColors[2].r = sPartData.color[0][2];
sPartMesh.geometry.faces[0].vertexColors[2].g = sPartData.color[1][2];
sPartMesh.geometry.faces[0].vertexColors[2].b = sPartData.color[2][2];

sPartMesh.geometry.faces[1].vertexColors[0].r = sPartData.color[0][1];
sPartMesh.geometry.faces[1].vertexColors[0].g = sPartData.color[1][1];
sPartMesh.geometry.faces[1].vertexColors[0].b = sPartData.color[2][1];

sPartMesh.geometry.faces[1].vertexColors[1].r = sPartData.color[0][2];
sPartMesh.geometry.faces[1].vertexColors[1].g = sPartData.color[1][2];
sPartMesh.geometry.faces[1].vertexColors[1].b = sPartData.color[2][2];

sPartMesh.geometry.faces[1].vertexColors[2].r = sPartData.color[0][3];
sPartMesh.geometry.faces[1].vertexColors[2].g = sPartData.color[1][3];
sPartMesh.geometry.faces[1].vertexColors[2].b = sPartData.color[2][3];





var idx = i*4;

// Top left (0)
sPartMesh.geometry.faces[0].vertexColors[0].r = state.smoke.seraphimColors[idx][1];
sPartMesh.geometry.faces[0].vertexColors[0].g = state.smoke.seraphimColors[idx][2];
sPartMesh.geometry.faces[0].vertexColors[0].b = state.smoke.seraphimColors[idx][3];
idx++;

// Bottom left (2)
sPartMesh.geometry.faces[0].vertexColors[1].r = state.smoke.seraphimColors[idx][1];
sPartMesh.geometry.faces[0].vertexColors[1].g = state.smoke.seraphimColors[idx][2];
sPartMesh.geometry.faces[0].vertexColors[1].b = state.smoke.seraphimColors[idx][3];

// Bottom left (2)
sPartMesh.geometry.faces[1].vertexColors[0].r = state.smoke.seraphimColors[idx][1];
sPartMesh.geometry.faces[1].vertexColors[0].g = state.smoke.seraphimColors[idx][2];
sPartMesh.geometry.faces[1].vertexColors[0].b = state.smoke.seraphimColors[idx][3];
idx++;

// Bottom right (3)
sPartMesh.geometry.faces[1].vertexColors[1].r = state.smoke.seraphimColors[idx][1];
sPartMesh.geometry.faces[1].vertexColors[1].g = state.smoke.seraphimColors[idx][2];
sPartMesh.geometry.faces[1].vertexColors[1].b = state.smoke.seraphimColors[idx][3];
idx++;

// Top right (1)
sPartMesh.geometry.faces[0].vertexColors[2].r = state.smoke.seraphimColors[idx][1];
sPartMesh.geometry.faces[0].vertexColors[2].g = state.smoke.seraphimColors[idx][2];
sPartMesh.geometry.faces[0].vertexColors[2].b = state.smoke.seraphimColors[idx][3];

// Top right  (1)
sPartMesh.geometry.faces[1].vertexColors[2].r = state.smoke.seraphimColors[idx][1];
sPartMesh.geometry.faces[1].vertexColors[2].g = state.smoke.seraphimColors[idx][2];
sPartMesh.geometry.faces[1].vertexColors[2].b = state.smoke.seraphimColors[idx][3];

// FACE A: 0, 2, 1 (or: top left, bottom left, top right)
// FACE B: 2, 3, 1 (or: bottom left, bottom right, top right)

// 0: Top Left
// 1: Top Right
// 2: Bottom Left
// 3: Bottom Right


this.seraphimTextures[sti++] = u0;
this.seraphimTextures[sti++] = v0;

this.seraphimTextures[sti++] = u0;
this.seraphimTextures[sti++] = v1;

this.seraphimTextures[sti++] = u1;
this.seraphimTextures[sti++] = v0;

this.seraphimTextures[sti++] = u0;
this.seraphimTextures[sti++] = v1;

this.seraphimTextures[sti++] = u1;
this.seraphimTextures[sti++] = v1;

this.seraphimTextures[sti++] = u1;
this.seraphimTextures[sti++] = v0;


=====

precision highp float;
precision highp int;

#define VERTEX_TEXTURES


#define MAX_DIR_LIGHTS 0
#define MAX_POINT_LIGHTS 0
#define MAX_SPOT_LIGHTS 0
#define MAX_HEMI_LIGHTS 0
#define MAX_SHADOWS 0
#define MAX_BONES 251

uniform mat4 modelMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat3 normalMatrix;
uniform vec3 cameraPosition;
attribute vec3 position;
attribute vec3 normal;
attribute vec2 uv;
attribute vec2 uv2;
#ifdef USE_COLOR
	attribute vec3 color;
#endif
#ifdef USE_MORPHTARGETS
	attribute vec3 morphTarget0;
	attribute vec3 morphTarget1;
	attribute vec3 morphTarget2;
	attribute vec3 morphTarget3;
	#ifdef USE_MORPHNORMALS
		attribute vec3 morphNormal0;
		attribute vec3 morphNormal1;
		attribute vec3 morphNormal2;
		attribute vec3 morphNormal3;
	#else
		attribute vec3 morphTarget4;
		attribute vec3 morphTarget5;
		attribute vec3 morphTarget6;
		attribute vec3 morphTarget7;
	#endif
#endif
#ifdef USE_SKINNING
	attribute vec4 skinIndex;
	attribute vec4 skinWeight;
#endif

void main()
{
    gl_Position = projectionMatrix * modelViewMatrix * vec4(color, 1.0);
}

====

precision highp float;
precision highp int;

#define MAX_DIR_LIGHTS 0
#define MAX_POINT_LIGHTS 0
#define MAX_SPOT_LIGHTS 0
#define MAX_HEMI_LIGHTS 0
#define MAX_SHADOWS 0
uniform mat4 viewMatrix;
uniform vec3 cameraPosition;

void main()
{
    gl_FragColor = vec4( color, 1.0 );
}